// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  email            String          @unique
  emailVerified    DateTime?
  name             String?
  image            String?
  dateOfSobriety   DateTime?
  substanceOfAbuse String?
  journalEntries   JournalEntry[]
  questionnaires   Questionnaire[]
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JournalEntry {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String?
  content    String   @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  completion String?  @db.Text

  @@index([userId, id])
}

model Questionnaire {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  mood         Int      @default(0)
  motivation   Int      @default(0)
  anxiety      Int      @default(0)
  sleepQuality Int      @default(0) // 0-10 scale
  cravings     Int      @default(0) // 0-10 scale

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Substance {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
}
